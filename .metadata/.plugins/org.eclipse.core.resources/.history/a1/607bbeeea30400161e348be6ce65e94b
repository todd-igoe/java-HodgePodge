package breakout2;

import javax.swing.JPanel;

public class BreakoutPanel extends JPanel {
private static final int NUM_BRICK_ROWS = 10;
private static final int NUM_BRICK_COLUMNS = 30;
private javax . swing . Timer timer ;
private Ball ball ;
private ArrayList < Brick > b r i c k s ;
private Paddle paddle ;

private Player player ;
private boolean gameStarted = false ;
public BreakoutPanel ( ) {
ball = new Ball ( BallColor . Red , this ) ;
paddle = new Paddle ( Color .BLUE, this ) ;
b r i c k s = new ArrayList <> () ;
player = new Player ( ) ;
c r e a t e B r i c k s ( ) ;
addKeyListener (new KeyAdapter ( ) {
public void keyPressed ( KeyEvent e ) {
String s = KeyEvent . getKeyText ( e . getKeyCode ( ) ) ;
i f ( e . getKeyCode ( ) == KeyEvent .VK LEFT) {
paddle . moveLeft ( ) ;
}
i f ( s . equals ( "Right" ) ) {
paddle . moveRight ( ) ;
}
r e p a i n t ( ) ;
}
} ) ;
setFocusable ( true ) ;
addMouseMotionListener (new MouseMotionAdapter ( ) {
boolean f i r s t T i m e = true ;
int oldX ;
public void mouseMoved ( MouseEvent e ) {
i f ( f i r s t T i m e ) {
oldX = e . getX ( ) ;
f i r s t T i m e = false ;
}
paddle . move( e . getX ( ) - oldX ) ;

oldX = e . getX ( ) ;
r e p a i n t ( ) ;
}
} ) ;
}
private Color getRandomColor ( ) {
Color c o l o r = new Color ( ( int ) (Math . random ( ) * 256) , ( int ) (Math .
random ( ) * 256) , ( int ) (Math . random ( ) * 256) ) ;
i f ( getBackground ( ) . equals ( c o l o r ) ) {
return Color .RED;
}
return c o l o r ;
}
private void c r e a t e B r i c k s ( ) {
for ( int row = 0 ; row < NUM_BRICK_ROWS; row++) {
for ( int c o l = 0 ; c o l < NUM_BRICK_COLUMNS; c o l++) {
b r i c k s . add (new Brick ( row , col , getRandomColor ( ) ) ) ;
}
}
}
public void s t a r t ( ) {
gameStarted = true ;
i f ( timer != null ) {
timer . stop ( ) ;
}
i f ( ! player . i s A l i v e ( ) ) {
player = new Player ( ) ;
ball = new Ball ( BallColor . Red , this ) ;
c r e a t e B r i c k s ( ) ;
}
timer = new javax . swing . Timer ( BallSpeed .NORMAL. speed ( ) , new
TimeListener ( ) ) ;
timer . s t a r t ( ) ;
r e p a i n t ( ) ;
}
public void pause ( ) {
i f ( timer == null ) {
return ;
}
timer . stop ( ) ;
}
public void changeBallColor ( BallColor c o l o r ) {
ball . changeColor ( c o l o r ) ;
r e p a i n t ( ) ;
}
public void showMessage ( String s , Graphics2D g2 ) {
Font myFont = new Font ( "SansSerif" , Font .BOLD + Font . ITALIC , 40) ;
g2 . setFont (myFont) ;
g2 . setColor ( Color .RED) ;

Rectangle2D textBox = myFont . getStringBounds ( s , g2 .
getFontRenderContext ( ) ) ;
g2 . drawString ( s , ( int ) ( getWidth ( ) / 2 - textBox . getWidth ( ) / 2) , (
int ) ( getHeight ( ) / 2 - textBox . getHeight ( ) ) ) ;
}
public void paintComponent ( Graphics g ) {
super . paintComponent ( g ) ;
Graphics2D g2 = ( Graphics2D ) g ;
i f ( b r i c k s . s i z e ( ) == 0 && ! gameStarted ) {
showMessage ( "YOU WIN!" , g2 ) ;
gameStarted = false ;
} else i f ( ! player . i s A l i v e ( ) ) {
showMessage ( "GAME OVER!" , g2 ) ;
gameStarted = false ;
} else {
ball . draw ( g2 ) ;
paddle . draw ( g2 ) ;
for ( Brick brick : b r i c k s ) {
brick . draw ( g2 ) ;
}
}
i f ( gameStarted ) {
player . draw ( g2 ) ;
}
}
public void changeBallSpeed ( int speed ) {
timer . setDelay ( speed ) ;
}
class TimeListener implements ActionListener {
public void bounceBall ( Ball ball , Brick brick ) {
i f ( ball . below ( brick ) ) {
ball . goDown ( ) ;
}
i f ( ball . above ( brick ) ) {
ball . goUp ( ) ;
}
i f ( ball . l e f t O f ( brick ) ) {
ball . goLeft ( ) ;
}
i f ( ball . rightOf ( brick ) ) {
ball . goRight ( ) ;
}
}
public void bounceBall ( Ball ball , ArrayList < Brick > b r i c k s ) {
i f ( b r i c k s . s i z e ( ) == 0) {
return ;
}
i f ( b r i c k s . s i z e ( ) == 1) {
bounceBall ( ball , b r i c k s . get (0) ) ;
return ;













}
Brick combinedBrick = b r i c k s . get (0) . add ( b r i c k s . get (1) ) ;
bounceBall ( ball , combinedBrick ) ;
}
public void actionPerformed ( ActionEvent e ) {
Ball newBall = ball . g e t V i r t u a l ball ( ) ;
ArrayList < Brick > bricksToBeDeleted = new ArrayList < Brick > () ;
for ( Brick brick : b r i c k s ) {
i f ( brick . i n t e r s e c t s ( newBall ) ) {
bricksToBeDeleted . add ( brick ) ;
}
}
bounceBall ( ball , bricksToBeDeleted ) ;
for ( Brick brick : bricksToBeDeleted ) {
b r i c k s . remove ( brick ) ;
}
i f ( newBall . i n t e r s e c t s ( paddle ) ) {
ball . goUp ( ) ;
i f ( newBall . getX ( ) + newBall . getWidth ( ) / 2 < paddle . getX ( ) +
paddle . getWidth ( ) / 2) {
ball . goLeft ( ) ;
} else {
ball . goRight ( ) ;
}
} else i f ( ball . getY ( ) > paddle . getY ( ) - paddle . getHeight ( ) ) {
player . k i l l P l a y e r ( ) ;
ball . goUp ( ) ;
}
ball . move ( ) ;
r e p a i n t ( ) ;
}
}
} // end ALL
